import groovy.json.JsonOutput
pipeline {
    agent any

environment{
			 props=load "/home/sivasankar88723/jenkins_cred/customenv.properties";
			 returnObj=''
             
	}

   
stages {
    
stage('Loading Environment Variables') {
            steps {
                
                script {
                   try{
                  
                   env.projectId="$DEV_PROJECTID"
                   env.bucketName="$DEV_BUCKETNAME"
                   }catch(err){
                       echo "$err"
                       returnObj='{"jobId":'+params.jobId+',errMessage":'+"$err"+',"stageName":"Loading Environment Variables","status":"FAILURE"}'
                       throw err
                   }
                    
                }
            }
        }
stage('Download from GCS_DOckerfile') {
            steps{
                script{
                try{
                step([$class: 'DownloadStep', 
			credentialsId:env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/Dockerfile",
                      localDirectory: "/var/lib/jenkins/workspace/"])
                      
                }catch(err){
                     echo "$err"
                     returnObj='{"jobId":'+params.jobId+',errMessage":'+"$err"+',"stageName":"Download From GCS_Dockerfile","status":"FAILURE"}'
                     throw err
                }
                }
            }
        }

stage('Download from GCS_pyfile') {
            steps{
	    	script{
	    	    try{
	    		ary=(params.script_type)
	    		echo params.script_type
			ary_split=ary.split(':')
			    
			for(int i=0;i<ary_split.size();i++)
			
			{
			    echo "1"
    			echo ary_split[i]
			if(ary_split[i] =='Python' || ary_split[i] == '' )
				{
                
                			step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/*.py",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
				}
			else if(ary_split[i]== 'R')
				{
                
                			step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/*.R",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
				}
			else if(ary_split[i]== 'Java')
				{
                
                			step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/*.Java",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
				}
			else if(ary_split[i]== 'Shell')
				{
                
                			step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/src/*.sh",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
                            step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/src/*.template",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
				}
			else if(ary_split[i]== 'html')
				{
                
                			step([$class: 'DownloadStep', 
					credentialsId: env.projectId,  bucketUri: "gs://${bucketName}/${gcsPath}/templates/*.html",
                      			localDirectory: "/var/lib/jenkins/workspace/"])
				}
				
				}
	    	    }catch(err){
			echo "$err"
	    	         returnObj='{"jobId":'+params.jobId+',errMessage":'+"$err"+',"stageName":"Download From GCS_Pythonfile","status":"FAILURE"}'
                     throw err
	    	    }
				}
			}
            }
        



stage('Build image') {
	steps{
		script{
		    try{
			app = docker.build("gcr.io/$projectId/${imageName}","/var/lib/jenkins/workspace/${gcsPath}/")
		    }catch(err){
			echo "$err"
		         returnObj='{"jobId":'+params.jobId+',errMessage":'+"$err"+',"stageName":"Build Image","status":"FAILURE"}'
                 throw err
			}
      
		}
	}
}
stage('Push image') {
	steps{
		script{
		    try{
			docker.withRegistry('https://gcr.io', "gcr:$projectId"){
    			app.push("${tagNumber}")
    			app.push("latest")}
		    }catch(err){
			echo "$err"
		         returnObj='{"jobId":'+params.jobId+',errMessage":'+"$err"+',"stageName":"Push Image","status":"FAILURE"}'
                     throw err
		    }
		}
  	}
}
}
post {
success {
script {
 returnObj='{"jobId":'+params.jobId+',"errMessage":"No Error" ,"stageName":"ALL","status":"SUCCESS"}'
echo JsonOutput.toJson(returnObj)
echo returnObj
}
}
failure {
script {
echo JsonOutput.toJson(returnObj)
echo returnObj

}
}
} 
}


